{"version":3,"sources":["ResultItem.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Resultresult","recipe","className","href","url","target","rel","src","image","alt","label","source","Header","useState","recipes","setRecipes","value","setValue","onSubmit","e","preventDefault","fetch","then","res","json","data","hits","type","name","onChange","changeHandler","map","item","i","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAGe,SAASA,EAAT,GAAiC,IAAVC,EAAS,EAATA,OAGlC,OACE,sBAAKC,UAAU,SAAf,UACE,mBAAGC,KAAMF,EAAOG,IACdC,OAAO,SACPC,IAAI,aAFN,SAGI,qBAAKJ,UAAU,gBACfK,IAAKN,EAAOO,MACZC,IAAKR,EAAOS,UAGhB,qBAAKR,UAAU,gBAAf,SACGD,EAAOS,QAEV,sBAAKR,UAAU,oBAAf,4BACiB,+BAAOD,EAAOU,YAE/B,mBAAGR,KAAMF,EAAOG,IACdC,OAAO,SACPC,IAAI,aAFN,SAGI,wBAAQJ,UAAU,iBAAlB,6BCtBG,SAASU,IAEtB,IAF+B,EAQDC,mBAAS,IARR,mBAQxBC,EARwB,KAQfC,EARe,OASLF,mBAAS,IATJ,mBASxBG,EATwB,KASjBC,EATiB,KAuB3B,OACE,sBAAKf,UAAU,SAAf,UACE,oBAAIA,UAAU,gBAAd,yBACI,sBAAMA,UAAU,cAAcgB,SAXvB,SAACC,GAClBA,EAAEC,iBAEFC,MAAM,GAAD,OAhBQ,0BAgBR,OAbK,UAaL,cAA0BL,EAA1B,mBAdQ,WAcR,oBAfS,qCAgBXM,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAIV,EAAWU,EAAKC,UAMtB,SACI,sBAAKxB,UAAU,mBAAf,UACI,uBACEyB,KAAK,OACLC,KAAK,cACLZ,MAAOA,EACPa,SAAU,SAAAV,GAAC,OArBX,SAACA,GACrBF,EAASE,EAAEd,OAAOW,OAoBiBc,CAAcX,MAE/B,wBAAQQ,KAAK,SAAb,yBAGPb,EAAQiB,KAAI,SAACC,EAAKC,GAAN,OACX,cAAC,EAAD,CAAoBhC,OAAQ+B,EAAK/B,QAAhBgC,SCpClB,SAASC,IAGpB,OACE,qBAAKhC,UAAU,MAAf,SACI,cAAC,EAAD,MCEUiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.519531d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ResultItem.css';\r\n\r\nexport default function Resultresult({recipe}) {\r\n  \r\n   \r\n    return (\r\n      <div className=\"result\">\r\n        <a href={recipe.url} \r\n          target=\"_blank\" \r\n          rel=\"noreferrer\">\r\n            <img className=\"result__image\" \r\n            src={recipe.image}\r\n            alt={recipe.label} \r\n            />\r\n        </a>\r\n        <div className=\"result__title\">\r\n          {recipe.label}\r\n        </div>\r\n        <div className=\"result__publisher\">\r\n          Recipe Source: <span>{recipe.source}</span>\r\n        </div>\r\n        <a href={recipe.url} \r\n          target=\"_blank\" \r\n          rel=\"noreferrer\">\r\n            <button className=\"result__button\"> \r\n              See Recipe\r\n            </button>\r\n        </a>\r\n      </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './Header.css';\r\nimport ResultItem from './ResultItem';\r\nexport default function Header() {\r\n\r\n  const baseURL= 'https://api.edamam.com';\r\n  const api_key = '51c012775148e57fcc2f5da41fc1c75d';\r\n  const app_id = '507e29f3';\r\n  const search = `/search`;\r\n  \r\n  \r\n  const [recipes, setRecipes] = useState([]);\r\n  const [value, setValue] = useState('');\r\n\r\n  const changeHandler = (e) => {\r\n    setValue(e.target.value)\r\n  }\r\n\r\n  const submitForm = (e)=>{\r\n    e.preventDefault();\r\n    \r\n    fetch(`${baseURL}${search}?q=${value}&app_id=${app_id}&app_key=${api_key}`)\r\n      .then(res=>res.json())\r\n      .then(data => setRecipes(data.hits));\r\n  }\r\n   \r\n      return (\r\n        <div className=\"header\">\r\n          <h1 className=\"header__title\">Food Finder</h1>\r\n              <form className=\"search-form\" onSubmit={submitForm}>\r\n                  <div className='search-form__bar'>\r\n                      <input \r\n                        type=\"text\" \r\n                        name=\"ingredients\"\r\n                        value={value}\r\n                        onChange={e => changeHandler(e)}>\r\n                      </input>\r\n                      <button type=\"submit\">Search</button>\r\n                  </div>\r\n              </form>\r\n              {recipes.map((item,i)  => \r\n                <ResultItem key={i} recipe={item.recipe}/>\r\n              )}\r\n        </div>\r\n      )  \r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\n\r\n\r\nexport default function App() {\r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <Header/>         \r\n      </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}